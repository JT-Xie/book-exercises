# Create a variable `my_name` that contains your name
my_name <- "Jiatian Xie"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
print(name_length)
toupper(now_doing)
now_doing <- paste(my_name, "is programming")
toupper(now_doing)
now_doing <- toupper(now_doing)
now_doing <- paste(my_name, "is programming")
new_fav_1 <- fav_1/sqrt(201)
fav_1 <- 7
fav_2 <- 77
new_fav_1 <- fav_1/sqrt(201)
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-1/exercise.R')
Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- (raw_sum, 1)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max <- max(raw_sum, sum_round)
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 7
fav_2 <- 77
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- fav_1 + fav_2
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- round_1 + round_2
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max <- max(raw_sum, sum_round)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max <- max(raw_sum, round_sum)
max <- max(raw_sum, round_sum)
round_sum <- round(raw_sum, 1)
max <- max(raw_sum, round_sum)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max <- max(raw_sum, round_sum)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max <- max(round_sum, sum_round)
add_three <- function(number)
new_number <- number + 3
return(new_number)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
new_number <- number + 3
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(number)
new_number <- number + 3
return(new_number)
add_three <- function(number)
new_number <- number + 3
return(new_number)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
View(add_three)
imperial_to_metric <- function(feet, inches)
meter <- 0.3048 * feet + 0.0254 * inches
return(meter)
return(days_remaining)  # return remaining days
days_to_deadline <- function(deadline, today) {  # Define function 'days_to_deadline' that takes the following two arguments: deadline, today.
days_remaining <- as.Date(deadline) - as.Date(today)  # Calculate how many days until deadline from today
return(days_remaining)  # return remaining days
}
imperial_to_metric <- function(feet, inches)
meter <- 0.3048 * feet + 0.0254 * inches
return(meter)
add_three <- function(number){}
new_number <- number + 3
return(new_number)
}
add_three <- function(number){
new_number <- number + 3
return(new_number)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(feet, inches){
meter <- 0.3048 * feet + 0.0254 * inches
return(meter)
}
# Create a var
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,3)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,4)
